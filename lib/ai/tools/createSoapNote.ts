// lib/ai/tools/createSoapNote.ts
import { z } from "zod";
import { tool, type DataStreamWriter } from "ai";
import type { Session } from "next-auth";
import { generateUUID } from "@/lib/utils";
import { generateSoapNoteContent } from "@/artifacts/soap/generation"; // Import core logic
import { getClientById, saveDocument } from "@/lib/db/queries"; // Import DB functions

interface CreateSoapNoteProps {
  session: Session;
  dataStream: DataStreamWriter;
}

export const createSoapNote = ({
  session,
  dataStream,
}: CreateSoapNoteProps) =>
  tool({
    description:
      "Generates a SOAP progress note for a specific client based on their data and recent transcripts. Use this when asked to create a progress note or SOAP note.",
    parameters: z.object({
      clientId: z
        .string()
        .uuid()
        .describe(
          "The UUID of the client for whom to generate the SOAP note."
        ),
    }),
    execute: async ({ clientId }) => {
      const documentId = generateUUID();
      let title = `SOAP Note for ${clientId}`; // Fallback

      if (!session.user?.id) {
        throw new Error("User session not found for createSoapNote tool.");
      }
      const userId = session.user.id;

      // Fetch client name for a better title & verify access
      try {
        const client = await getClientById(clientId, userId); // Auth check
        if (!client) {
          throw new Error("Client not found or access denied.");
        }
        title = `SOAP Note - ${client.name}`;
      } catch (e) {
        console.error(
          `Tool: Could not fetch client name or verify access for SOAP note title: ${e}`
        );
        // Return an error object that the tool framework can handle
        return {
          error: `Failed to verify client access: ${
            e instanceof Error ? e.message : "Unknown error"
          }`,
        };
      }

      // Inform the UI about the artifact being created
      dataStream.write({ type: "kind", content: "text" }); // Use write
      dataStream.write({ type: "id", content: documentId });
      dataStream.write({ type: "title", content: title });
      dataStream.write({ type: "clear", content: "" });

      try {
        // --- V1.5/V2: Streaming Implementation ---
        // Placeholder: Generate sync and manually stream (less efficient for long notes via tool)
        // In a real streaming scenario, you'd integrate with the handler's streaming logic.
        console.log(
          `[createSoapNote Tool] Generating content for ${clientId}`
        );
        const { fullText } = await generateSoapNoteContent(
          clientId,
          userId
        );

        // Save the document generated by the tool
        await saveDocument({
          id: documentId,
          title,
          kind: "text",
          content: fullText,
          userId: userId,
        });
        console.log(`[createSoapNote Tool] Saved document ${documentId}`);

        // Manually stream the result back (adjust chunking as needed)
        const chunkSize = 100;
        for (let i = 0; i < fullText.length; i += chunkSize) {
          const chunk = fullText.substring(i, i + chunkSize);
          dataStream.write({ type: "text-delta", content: chunk }); // Use write
        }
        // --- End Placeholder ---

        dataStream.write({ type: "finish", content: "" }); // Use write
        return {
          documentId: documentId,
          title: title,
          kind: "text",
          message: `SOAP note generation started for ${title}. The document is now visible.`,
        };
      } catch (error) {
        console.error(
          "[createSoapNote Tool] Error during execution:",
          error
        );
        dataStream.write({
          type: "error",
          content: "Failed to generate SOAP note.",
        }); // Use write
        dataStream.write({ type: "finish", content: "" }); // Use write
        return {
          error: `Failed to generate SOAP note: ${
            error instanceof Error ? error.message : "Unknown error"
          }`,
        };
      }
    },
  });
